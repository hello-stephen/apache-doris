# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Comment to trigger teamcity

on:
  issue_comment:
    types: [created, edited]

jobs:
  check-comment-if-need-to-trigger-teamcity:

    # This job only runs for pull request comments
    if: ${{ github.event.issue.pull_request && contains(fromJSON('["run buildall", "run compile", "run beut", "run feut", "run p0", "run p1", "run external", "run pipelinex_p0", "run clickbench", "run arm", "run tpch"]'), github.event.comment.body) }}

    runs-on: ubuntu-latest
    env:
      COMMENT_BODY: ${{ github.event.comment.body }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: "Parse PR comment"
      id: parse
      run: |
        PULL_REQUEST_NUM="$(echo "${{ github.event.issue.pull_request.url }}" | awk -F/ '{print $NF}')"
        COMMIT_ID_FROM_TRIGGER="$(curl -s -H "Authorization:Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/$(echo '${{ github.event.issue.pull_request.url }}' | awk -F/ '{print $NF}')" > pr_details.json && jq -r '.head.sha' pr_details.json)"
        echo "PULL_REQUEST_NUM=${PULL_REQUEST_NUM}" | tee -a "$GITHUB_OUTPUT"
        echo "COMMIT_ID_FROM_TRIGGER=${COMMIT_ID_FROM_TRIGGER}" | tee -a "$GITHUB_OUTPUT"
        echo "COMMENT_BODY='${COMMENT_BODY}'" | tee -a "$GITHUB_OUTPUT"
        reg="run (buildall|compile|p0|p1|feut|beut|external|clickbench|pipelinex_p0|arm|tpch)( [1-9]*[0-9]+)*"
        COMMENT_TRIGGER_TYPE="$(echo "${COMMENT_BODY}" | xargs | grep -E "${reg}" | awk -F' ' '{print $2}' | sed -n 1p)"
        COMMENT_REPEAT_TIMES="$(echo "${COMMENT_BODY}" | xargs | grep -E "${reg}" | awk -F' ' '{print $3}' | sed -n 1p)"
        echo "COMMENT_TRIGGER_TYPE=${COMMENT_TRIGGER_TYPE}" | tee -a "$GITHUB_OUTPUT"
        echo "COMMENT_REPEAT_TIMES=${COMMENT_REPEAT_TIMES}" | tee -a "$GITHUB_OUTPUT"

    - name: "Checkout master"
      uses: actions/checkout@v4

    - name: "Check if pr need run build"
      id: changes
      run: |
        source regression-test/pipeline/common/github-utils.sh
        set -x
        _get_pr_changed_files "${{ steps.parse.outputs.PULL_REQUEST_NUM }}"
        if file_changed_fe_ut; then
          echo "changes_fe_ut=true" | tee -a "$GITHUB_OUTPUT"
        fi
        if file_changed_be_ut; then
          echo "changes_be_ut=true" | tee -a "$GITHUB_OUTPUT"
        fi
        if file_changed_ckb; then
          echo "changes_ckb=true" | tee -a "$GITHUB_OUTPUT"
          echo "tpch=true" | tee -a "$GITHUB_OUTPUT"
        fi
        if file_changed_regression_p0; then
          echo "changes_p0=true" | tee -a "$GITHUB_OUTPUT"
          echo "changes_external=true" | tee -a "$GITHUB_OUTPUT"
          echo "changes_pipelinex_p0=true" | tee -a "$GITHUB_OUTPUT"
          echo "changes_arm=true" | tee -a "$GITHUB_OUTPUT"
        fi
        if file_changed_regression_p1; then
          echo "changes_p1=true" | tee -a "$GITHUB_OUTPUT"
        fi

    # - name: "Setup tmate session"
    #   if: ${{ failure() }}
    #   uses: mxschmitt/action-tmate@v3

    - name: "Trigger or Skip feut"
      if: ${{ contains(fromJSON('["feut", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        COMMIT_ID_FROM_TRIGGER=${{ steps.parse.outputs.COMMIT_ID_FROM_TRIGGER }}
        set -x
        if [[ ${{ steps.changes.outputs.changes_fe_ut }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "feut" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "feut"
        fi

    - name: "Trigger or Skip beut"
      if: ${{ contains(fromJSON('["beut", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        COMMIT_ID_FROM_TRIGGER=${{ steps.parse.outputs.COMMIT_ID_FROM_TRIGGER }}
        set -x
        if [[ ${{ steps.changes.outputs.changes_be_ut }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "beut" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "beut"
        fi

    - name: "Trigger or Skip compile"
      if: ${{ contains(fromJSON('["compile", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        COMMIT_ID_FROM_TRIGGER=${{ steps.parse.outputs.COMMIT_ID_FROM_TRIGGER }}
        set -x
        if [[ ${{ steps.changes.outputs.changes_p0 }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "compile" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "compile"
        fi

    - name: "Trigger or Skip p0"
      if: ${{ contains(fromJSON('["p0", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        COMMIT_ID_FROM_TRIGGER=${{ steps.parse.outputs.COMMIT_ID_FROM_TRIGGER }}
        set -x
        if [[ ${{ steps.parse.outputs.COMMENT_TRIGGER_TYPE }} == "buildall" ]]; then
          echo "COMMENT_TRIGGER_TYPE is buildall, trigger compile is enough, compile will trigger p0"
          exit
        fi
        if [[ ${{ steps.changes.outputs.changes_p0 }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "p0" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "p0"
        fi

    - name: "Trigger or Skip p1"
      if: ${{ contains(fromJSON('["p1", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        COMMIT_ID_FROM_TRIGGER=${{ steps.parse.outputs.COMMIT_ID_FROM_TRIGGER }}
        set -x
        if [[ ${{ steps.parse.outputs.COMMENT_TRIGGER_TYPE }} == "buildall" ]]; then
          echo "COMMENT_TRIGGER_TYPE is buildall, trigger compile is enough, compile will trigger p1"
          exit
        fi
        if [[ ${{ steps.changes.outputs.changes_p0 }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "p1" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "p1"
        fi

    - name: "Trigger or Skip external"
      if: ${{ contains(fromJSON('["external", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        COMMIT_ID_FROM_TRIGGER=${{ steps.parse.outputs.COMMIT_ID_FROM_TRIGGER }}
        set -x
        if [[ ${{ steps.parse.outputs.COMMENT_TRIGGER_TYPE }} == "buildall" ]]; then
          echo "COMMENT_TRIGGER_TYPE is buildall, trigger compile is enough, compile will trigger external"
          exit
        fi
        if [[ ${{ steps.changes.outputs.changes_p0 }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "external" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "external"
        fi

    - name: "Trigger or Skip pipelinex_p0"
      if: ${{ contains(fromJSON('["pipelinex_p0", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        COMMIT_ID_FROM_TRIGGER=${{ steps.parse.outputs.COMMIT_ID_FROM_TRIGGER }}
        set -x
        if [[ ${{ steps.parse.outputs.COMMENT_TRIGGER_TYPE }} == "buildall" ]]; then
          echo "COMMENT_TRIGGER_TYPE is buildall, trigger compile is enough, compile will trigger pipelinex_p0"
          exit
        fi
        if [[ ${{ steps.changes.outputs.changes_p0 }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "pipelinex_p0" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "pipelinex_p0"
        fi

    - name: "Trigger or Skip arm"
      if: ${{ contains(fromJSON('["arm", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        COMMIT_ID_FROM_TRIGGER=${{ steps.parse.outputs.COMMIT_ID_FROM_TRIGGER }}
        set -x
        if [[ ${{ steps.changes.outputs.changes_p0 }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "arm" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "arm"
        fi

    - name: "Trigger or Skip clickbench"
      if: ${{ contains(fromJSON('["clickbench", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        COMMIT_ID_FROM_TRIGGER=${{ steps.parse.outputs.COMMIT_ID_FROM_TRIGGER }}
        set -x
        if [[ ${{ steps.changes.outputs.changes_p0 }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "clickbench" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "clickbench"
        fi

    - name: "Trigger or Skip tpch"
      if: ${{ contains(fromJSON('["tpch", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        COMMIT_ID_FROM_TRIGGER=${{ steps.parse.outputs.COMMIT_ID_FROM_TRIGGER }}
        set -x
        if [[ ${{ steps.parse.outputs.COMMENT_TRIGGER_TYPE }} == "buildall" ]]; then
          echo "COMMENT_TRIGGER_TYPE is buildall, trigger clickbench is enough, clickbench will trigger tpch"
          exit
        fi
        if [[ ${{ steps.changes.outputs.changes_p0 }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "tpch" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "tpch"
        fi
