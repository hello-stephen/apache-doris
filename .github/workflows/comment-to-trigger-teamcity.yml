# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Comment to trigger teamcity

on:
  issue_comment:
    types: [created, edited]

jobs:
  check-comment-if-need-to-trigger-teamcity:

    # This job only runs for pull request comments
    if: ${{ github.event.issue.pull_request && contains(fromJSON('["run buildall", "run compile", "run beut", "run feut", "run p0", "run p1", "run external", "run pipelinex_p0", "run clickbench", "run arm", "run tpch"]'), github.event.comment.body) }}

    runs-on: ubuntu-latest
    env:
      PULL_REQUEST_NUM: $(echo "${{ github.event.issue.pull_request.url }}" | awk -F/ '{print $NF}')
      LATEST_COMMIT: $(curl -s -H "Authorization:Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/$(echo '${{ github.event.issue.pull_request.url }}' | awk -F/ '{print $NF}')" > pr_details.json && jq -r '.head.sha' pr_details.json)
      COMMENT_BODY: ${{ github.event.comment.body }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: "Parse PR comment"
      id: parse
      run: |
        echo "PULL_REQUEST_NUM=${{ env.PULL_REQUEST_NUM }}" | tee -a "$GITHUB_OUTPUT"
        echo "LATEST_COMMIT=${{ env.LATEST_COMMIT }}" | tee -a "$GITHUB_OUTPUT"
        echo "COMMENT_BODY='${{ env.COMMENT_BODY }}'" | tee -a "$GITHUB_OUTPUT"
        reg="run (buildall|compile|p0|p1|feut|beut|external|clickbench|pipelinex_p0|arm|tpch)( [1-9]*[0-9]+)*"
        COMMENT_TRIGGER_TYPE="$(echo "${COMMENT_BODY}" | xargs | grep -E "${reg}" | awk -F' ' '{print $2}' | sed -n 1p)"
        COMMENT_REPEAT_TIMES="$(echo "${COMMENT_BODY}" | xargs | grep -E "${reg}" | awk -F' ' '{print $3}' | sed -n 1p)"
        echo "COMMENT_TRIGGER_TYPE=${COMMENT_TRIGGER_TYPE}" | tee -a "$GITHUB_OUTPUT"
        echo "COMMENT_REPEAT_TIMES=${COMMENT_REPEAT_TIMES}" | tee -a "$GITHUB_OUTPUT"

    # - name: "Checkout PR ${{ steps.parse.outputs.PULL_REQUEST_NUM }}, commit ${{ steps.parse.outputs.LATEST_COMMIT }}"
    #   uses: actions/checkout@v4
    #   with:
    #     ref: ${{ steps.parse.outputs.LATEST_COMMIT }}

    - name: "Checkout master"
      uses: actions/checkout@v4

    - name: "Check if pr need run build"
      id: changes
      run: |
        cd regression-test/pipeline/common/
        set -x
        if bash check-pr-if-need-run-build.sh "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "fe-ut"; then
          echo "changes_fe_ut=true" | tee -a "$GITHUB_OUTPUT"
        fi
        if bash check-pr-if-need-run-build.sh "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "be-ut"; then
          echo "changes_be_ut=true" | tee -a "$GITHUB_OUTPUT"
        fi
        if bash check-pr-if-need-run-build.sh "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "ckb"; then
          echo "changes_ckb=true" | tee -a "$GITHUB_OUTPUT"
          echo "tpch=true" | tee -a "$GITHUB_OUTPUT"
        fi
        if bash check-pr-if-need-run-build.sh "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "regression-p0"; then
          echo "changes_p0=true" | tee -a "$GITHUB_OUTPUT"
          echo "changes_external=true" | tee -a "$GITHUB_OUTPUT"
          echo "changes_pipelinex_p0"=true" | tee -a "$GITHUB_OUTPUT"
          echo "changes_arm"=true" | tee -a "$GITHUB_OUTPUT"
        fi
        if bash check-pr-if-need-run-build.sh "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "regression-p1"; then
          echo "changes_p1=true" | tee -a "$GITHUB_OUTPUT"
        fi
        echo "-- COMMENT_TRIGGER_TYPE: '${{ steps.parse.outputs.COMMENT_TRIGGER_TYPE }}'"
        echo "-- COMMENT_REPEAT_TIMES: '${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}'"
        cd -

    - name: "Trigger or Skip fe ut"
      if: ${{ contains(fromJSON('["feut", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) }}
      run: |
        echo "GITHUB_TOKEN: ${GITHUB_TOKEN}"
        source ./regression-test/pipeline/common/teamcity-utils.sh
        if [[ ${{ steps.changes.outputs.changes_fe_ut }} == 'true' ]];then
          add_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "${{ steps.parse.outputs.COMMENT_TRIGGER_TYPE }}" "${{ steps.parse.outputs.COMMENT_REPEAT_TIMES }}"
        else
          skip_build "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "${{ steps.parse.outputs.COMMENT_TRIGGER_TYPE }}"
        fi

    - name: "Skip fe ut"
      if: ${{ contains(fromJSON('["feut", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) && steps.changes.outputs.changes_fe_ut == 'false' }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        skip_teamcity_pipeline "${{ steps.parse.outputs.PULL_REQUEST_NUM }}" "${{ steps.parse.outputs.COMMENT_TRIGGER_TYPE }}"

    # - name: "Setup tmate session"
    #   if: ${{ failure() }}
    #   uses: mxschmitt/action-tmate@v3


    - name: "Trigger be ut"
      if: ${{ contains(fromJSON('["beut", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) && steps.changes.outputs.changes_be_ut == 'true' }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        cancel_and_add_build

    - name: "Skip be ut"
      if: ${{ contains(fromJSON('["beut", "buildall"]'), steps.parse.outputs.COMMENT_TRIGGER_TYPE) && steps.changes.outputs.changes_be_ut == 'false' }}
      run: |
        source ./regression-test/pipeline/common/teamcity-utils.sh
        skip_build





